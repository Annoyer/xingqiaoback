<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mapper.DemandMapper" >
  <resultMap id="BaseResultMap" type="model.Demand" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="gender" property="gender" jdbcType="INTEGER" />
    <result column="birthday" property="birthday" jdbcType="VARCHAR" />
    <result column="disease" property="disease" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="model.DemandWithBLOBs" extends="BaseResultMap" >
    <result column="report" property="report" jdbcType="LONGVARCHAR" />
    <result column="disease_his" property="diseaseHis" jdbcType="LONGVARCHAR" />
    <result column="allergy_his" property="allergyHis" jdbcType="LONGVARCHAR" />
    <result column="recovery_his" property="recoveryHis" jdbcType="LONGVARCHAR" />
    <result column="remark" property="remark" jdbcType="LONGVARCHAR" />
    <result column="more_B" property="moreB" jdbcType="LONGVARCHAR" />
    <result column="more_C" property="moreC" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, gender, birthday, disease, user_id
  </sql>
  <sql id="Blob_Column_List" >
    report, disease_his, allergy_his, recovery_his, remark, more_B, more_C
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="model.DemandExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from demand
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="model.DemandExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from demand
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from demand
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from demand
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="model.DemandExample" >
    delete from demand
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="model.DemandWithBLOBs" >
    insert into demand (id, name, gender, 
      birthday, disease, user_id, 
      report, disease_his, allergy_his, 
      recovery_his, remark, more_B, 
      more_C)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{gender,jdbcType=INTEGER}, 
      #{birthday,jdbcType=VARCHAR}, #{disease,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{report,jdbcType=LONGVARCHAR}, #{diseaseHis,jdbcType=LONGVARCHAR}, #{allergyHis,jdbcType=LONGVARCHAR}, 
      #{recoveryHis,jdbcType=LONGVARCHAR}, #{remark,jdbcType=LONGVARCHAR}, #{moreB,jdbcType=LONGVARCHAR}, 
      #{moreC,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="model.DemandWithBLOBs" >
    insert into demand
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="gender != null" >
        gender,
      </if>
      <if test="birthday != null" >
        birthday,
      </if>
      <if test="disease != null" >
        disease,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="report != null" >
        report,
      </if>
      <if test="diseaseHis != null" >
        disease_his,
      </if>
      <if test="allergyHis != null" >
        allergy_his,
      </if>
      <if test="recoveryHis != null" >
        recovery_his,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="moreB != null" >
        more_B,
      </if>
      <if test="moreC != null" >
        more_C,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null" >
        #{gender,jdbcType=INTEGER},
      </if>
      <if test="birthday != null" >
        #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="disease != null" >
        #{disease,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="report != null" >
        #{report,jdbcType=LONGVARCHAR},
      </if>
      <if test="diseaseHis != null" >
        #{diseaseHis,jdbcType=LONGVARCHAR},
      </if>
      <if test="allergyHis != null" >
        #{allergyHis,jdbcType=LONGVARCHAR},
      </if>
      <if test="recoveryHis != null" >
        #{recoveryHis,jdbcType=LONGVARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="moreB != null" >
        #{moreB,jdbcType=LONGVARCHAR},
      </if>
      <if test="moreC != null" >
        #{moreC,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="model.DemandExample" resultType="java.lang.Integer" >
    select count(*) from demand
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update demand
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null" >
        gender = #{record.gender,jdbcType=INTEGER},
      </if>
      <if test="record.birthday != null" >
        birthday = #{record.birthday,jdbcType=VARCHAR},
      </if>
      <if test="record.disease != null" >
        disease = #{record.disease,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.report != null" >
        report = #{record.report,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.diseaseHis != null" >
        disease_his = #{record.diseaseHis,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.allergyHis != null" >
        allergy_his = #{record.allergyHis,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.recoveryHis != null" >
        recovery_his = #{record.recoveryHis,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.moreB != null" >
        more_B = #{record.moreB,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.moreC != null" >
        more_C = #{record.moreC,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update demand
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=INTEGER},
      birthday = #{record.birthday,jdbcType=VARCHAR},
      disease = #{record.disease,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=INTEGER},
      report = #{record.report,jdbcType=LONGVARCHAR},
      disease_his = #{record.diseaseHis,jdbcType=LONGVARCHAR},
      allergy_his = #{record.allergyHis,jdbcType=LONGVARCHAR},
      recovery_his = #{record.recoveryHis,jdbcType=LONGVARCHAR},
      remark = #{record.remark,jdbcType=LONGVARCHAR},
      more_B = #{record.moreB,jdbcType=LONGVARCHAR},
      more_C = #{record.moreC,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update demand
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=INTEGER},
      birthday = #{record.birthday,jdbcType=VARCHAR},
      disease = #{record.disease,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="model.DemandWithBLOBs" >
    update demand
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="gender != null" >
        gender = #{gender,jdbcType=INTEGER},
      </if>
      <if test="birthday != null" >
        birthday = #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="disease != null" >
        disease = #{disease,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="report != null" >
        report = #{report,jdbcType=LONGVARCHAR},
      </if>
      <if test="diseaseHis != null" >
        disease_his = #{diseaseHis,jdbcType=LONGVARCHAR},
      </if>
      <if test="allergyHis != null" >
        allergy_his = #{allergyHis,jdbcType=LONGVARCHAR},
      </if>
      <if test="recoveryHis != null" >
        recovery_his = #{recoveryHis,jdbcType=LONGVARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="moreB != null" >
        more_B = #{moreB,jdbcType=LONGVARCHAR},
      </if>
      <if test="moreC != null" >
        more_C = #{moreC,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="model.DemandWithBLOBs" >
    update demand
    set name = #{name,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=INTEGER},
      birthday = #{birthday,jdbcType=VARCHAR},
      disease = #{disease,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      report = #{report,jdbcType=LONGVARCHAR},
      disease_his = #{diseaseHis,jdbcType=LONGVARCHAR},
      allergy_his = #{allergyHis,jdbcType=LONGVARCHAR},
      recovery_his = #{recoveryHis,jdbcType=LONGVARCHAR},
      remark = #{remark,jdbcType=LONGVARCHAR},
      more_B = #{moreB,jdbcType=LONGVARCHAR},
      more_C = #{moreC,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.Demand" >
    update demand
    set name = #{name,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=INTEGER},
      birthday = #{birthday,jdbcType=VARCHAR},
      disease = #{disease,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>