<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mapper.PreferentialsMapper" >
  <resultMap id="BaseResultMap" type="model.Preferentials" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="all_amount" property="allAmount" jdbcType="INTEGER" />
    <result column="amount" property="amount" jdbcType="INTEGER" />
    <result column="classes" property="classes" jdbcType="INTEGER" />
    <result column="s_time" property="sTime" jdbcType="VARCHAR" />
    <result column="e_time" property="eTime" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="model.PreferentialsWithBLOBs" extends="BaseResultMap" >
    <result column="more_A" property="moreA" jdbcType="LONGVARCHAR" />
    <result column="more_B" property="moreB" jdbcType="LONGVARCHAR" />
    <result column="more_C" property="moreC" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, all_amount, amount, classes, s_time, e_time
  </sql>
  <sql id="Blob_Column_List" >
    more_A, more_B, more_C
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="model.PreferentialsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from preferentials
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="model.PreferentialsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from preferentials
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from preferentials
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from preferentials
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="model.PreferentialsExample" >
    delete from preferentials
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="model.PreferentialsWithBLOBs" >
    insert into preferentials (id, name, all_amount, 
      amount, classes, s_time, 
      e_time, more_A, more_B, 
      more_C)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{allAmount,jdbcType=INTEGER}, 
      #{amount,jdbcType=INTEGER}, #{classes,jdbcType=INTEGER}, #{sTime,jdbcType=VARCHAR}, 
      #{eTime,jdbcType=VARCHAR}, #{moreA,jdbcType=LONGVARCHAR}, #{moreB,jdbcType=LONGVARCHAR}, 
      #{moreC,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="model.PreferentialsWithBLOBs" >
    insert into preferentials
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="allAmount != null" >
        all_amount,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="classes != null" >
        classes,
      </if>
      <if test="sTime != null" >
        s_time,
      </if>
      <if test="eTime != null" >
        e_time,
      </if>
      <if test="moreA != null" >
        more_A,
      </if>
      <if test="moreB != null" >
        more_B,
      </if>
      <if test="moreC != null" >
        more_C,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="allAmount != null" >
        #{allAmount,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=INTEGER},
      </if>
      <if test="classes != null" >
        #{classes,jdbcType=INTEGER},
      </if>
      <if test="sTime != null" >
        #{sTime,jdbcType=VARCHAR},
      </if>
      <if test="eTime != null" >
        #{eTime,jdbcType=VARCHAR},
      </if>
      <if test="moreA != null" >
        #{moreA,jdbcType=LONGVARCHAR},
      </if>
      <if test="moreB != null" >
        #{moreB,jdbcType=LONGVARCHAR},
      </if>
      <if test="moreC != null" >
        #{moreC,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="model.PreferentialsExample" resultType="java.lang.Integer" >
    select count(*) from preferentials
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update preferentials
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.allAmount != null" >
        all_amount = #{record.allAmount,jdbcType=INTEGER},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=INTEGER},
      </if>
      <if test="record.classes != null" >
        classes = #{record.classes,jdbcType=INTEGER},
      </if>
      <if test="record.sTime != null" >
        s_time = #{record.sTime,jdbcType=VARCHAR},
      </if>
      <if test="record.eTime != null" >
        e_time = #{record.eTime,jdbcType=VARCHAR},
      </if>
      <if test="record.moreA != null" >
        more_A = #{record.moreA,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.moreB != null" >
        more_B = #{record.moreB,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.moreC != null" >
        more_C = #{record.moreC,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update preferentials
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      all_amount = #{record.allAmount,jdbcType=INTEGER},
      amount = #{record.amount,jdbcType=INTEGER},
      classes = #{record.classes,jdbcType=INTEGER},
      s_time = #{record.sTime,jdbcType=VARCHAR},
      e_time = #{record.eTime,jdbcType=VARCHAR},
      more_A = #{record.moreA,jdbcType=LONGVARCHAR},
      more_B = #{record.moreB,jdbcType=LONGVARCHAR},
      more_C = #{record.moreC,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update preferentials
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      all_amount = #{record.allAmount,jdbcType=INTEGER},
      amount = #{record.amount,jdbcType=INTEGER},
      classes = #{record.classes,jdbcType=INTEGER},
      s_time = #{record.sTime,jdbcType=VARCHAR},
      e_time = #{record.eTime,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="model.PreferentialsWithBLOBs" >
    update preferentials
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="allAmount != null" >
        all_amount = #{allAmount,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=INTEGER},
      </if>
      <if test="classes != null" >
        classes = #{classes,jdbcType=INTEGER},
      </if>
      <if test="sTime != null" >
        s_time = #{sTime,jdbcType=VARCHAR},
      </if>
      <if test="eTime != null" >
        e_time = #{eTime,jdbcType=VARCHAR},
      </if>
      <if test="moreA != null" >
        more_A = #{moreA,jdbcType=LONGVARCHAR},
      </if>
      <if test="moreB != null" >
        more_B = #{moreB,jdbcType=LONGVARCHAR},
      </if>
      <if test="moreC != null" >
        more_C = #{moreC,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="model.PreferentialsWithBLOBs" >
    update preferentials
    set name = #{name,jdbcType=VARCHAR},
      all_amount = #{allAmount,jdbcType=INTEGER},
      amount = #{amount,jdbcType=INTEGER},
      classes = #{classes,jdbcType=INTEGER},
      s_time = #{sTime,jdbcType=VARCHAR},
      e_time = #{eTime,jdbcType=VARCHAR},
      more_A = #{moreA,jdbcType=LONGVARCHAR},
      more_B = #{moreB,jdbcType=LONGVARCHAR},
      more_C = #{moreC,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.Preferentials" >
    update preferentials
    set name = #{name,jdbcType=VARCHAR},
      all_amount = #{allAmount,jdbcType=INTEGER},
      amount = #{amount,jdbcType=INTEGER},
      classes = #{classes,jdbcType=INTEGER},
      s_time = #{sTime,jdbcType=VARCHAR},
      e_time = #{eTime,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>